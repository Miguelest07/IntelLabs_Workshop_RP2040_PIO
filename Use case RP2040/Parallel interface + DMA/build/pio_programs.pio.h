// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// ParallelPort //
// ------------ //

#define ParallelPort_wrap_target 0
#define ParallelPort_wrap 1

static const uint16_t ParallelPort_program_instructions[] = {
            //     .wrap_target
    0x98a0, //  0: pull   block           side 1     
    0x7008, //  1: out    pins, 8         side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ParallelPort_program = {
    .instructions = ParallelPort_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config ParallelPort_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ParallelPort_wrap_target, offset + ParallelPort_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

//Helper function to initialize this PIO program
static inline void ParallelPort_program_init(PIO pio, uint sm, uint offset, uint pin, uint npins, uint clkpin, float freq, float sys_hz)
{
    //Set up state machine and wrap target 
    pio_sm_config c = ParallelPort_program_get_default_config(offset);
    //Allow PIO to control GPIO pin as output
    for(int i = pin; i < (pin+npins); i++)
    {
        pio_gpio_init(pio, i);
    }
    pio_gpio_init(pio, clkpin);
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, npins, true);
    pio_sm_set_consecutive_pindirs(pio, sm, clkpin, 1, true);
    // Set the sideset pins
    sm_config_set_sideset_pins(&c, clkpin);
    // Set the output pins
    sm_config_set_out_pins(&c, pin, npins);
    // Set OSR shift direction
    sm_config_set_out_shift(&c, true, true, 32);
    // Set the clock divider for the state machine
    float div = sys_hz / freq;
    sm_config_set_clkdiv(&c, div);
    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
static inline void ParallelPort_change_sm_frequency(PIO pio, uint sm, uint offset, uint pin, uint npins, uint clkpin, float freq, float sys_hz)
{
    pio_sm_set_enabled(pio, sm, false);
    ParallelPort_program_init(pio, sm, offset, pin, npins, clkpin, freq, sys_hz);
    pio_sm_set_enabled(pio, sm, true);
}

#endif


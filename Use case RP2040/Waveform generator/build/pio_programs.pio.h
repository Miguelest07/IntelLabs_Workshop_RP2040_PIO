// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// ParallelPort //
// ------------ //

#define ParallelPort_wrap_target 0
#define ParallelPort_wrap 1

static const uint16_t ParallelPort_program_instructions[] = {
            //     .wrap_target
    0x98a0, //  0: pull   block           side 1     
    0x7008, //  1: out    pins, 8         side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ParallelPort_program = {
    .instructions = ParallelPort_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config ParallelPort_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ParallelPort_wrap_target, offset + ParallelPort_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

//Helper function to initialize this PIO program
static inline void ParallelPort_program_init(PIO pio, uint sm, uint offset, uint pin, uint npins, uint clkpin, float freq, float sys_hz)
{
    //Set up state machine and wrap target 
    pio_sm_config c = ParallelPort_program_get_default_config(offset);
    //Allow PIO to control GPIO pin as output
    for(int i = pin; i < (pin+npins); i++)
    {
        pio_gpio_init(pio, i);
    }
    pio_gpio_init(pio, clkpin);
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, npins, true);
    pio_sm_set_consecutive_pindirs(pio, sm, clkpin, 1, true);
    // Set the sideset pins
    sm_config_set_sideset_pins(&c, clkpin);
    // Set the output pins
    sm_config_set_out_pins(&c, pin, npins);
    // Set OSR shift direction
    sm_config_set_out_shift(&c, true, true, 32);
    // Set the clock divider for the state machine
    float div = sys_hz / freq;
    sm_config_set_clkdiv(&c, div);
    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
static inline void ParallelPort_change_sm_frequency(PIO pio, uint sm, uint offset, uint pin, uint npins, uint clkpin, float freq, float sys_hz)
{
    pio_sm_set_enabled(pio, sm, false);
    ParallelPort_program_init(pio, sm, offset, pin, npins, clkpin, freq, sys_hz);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// ------------- //
// RotaryEncoder //
// ------------- //

#define RotaryEncoder_wrap_target 15
#define RotaryEncoder_wrap 28

static const uint16_t RotaryEncoder_program_instructions[] = {
    0x000f, //  0: jmp    15                         
    0x000e, //  1: jmp    14                         
    0x001a, //  2: jmp    26                         
    0x000f, //  3: jmp    15                         
    0x001a, //  4: jmp    26                         
    0x000f, //  5: jmp    15                         
    0x000f, //  6: jmp    15                         
    0x000e, //  7: jmp    14                         
    0x001a, //  8: jmp    26                         
    0x000f, //  9: jmp    15                         
    0x000f, // 10: jmp    15                         
    0x000e, // 11: jmp    14                         
    0x000f, // 12: jmp    15                         
    0x001a, // 13: jmp    26                         
    0x008f, // 14: jmp    y--, 15                    
            //     .wrap_target
    0xe020, // 15: set    x, 0                       
    0x8080, // 16: pull   noblock                    
    0xa027, // 17: mov    x, osr                     
    0xa0e6, // 18: mov    osr, isr                   
    0x0036, // 19: jmp    !x, 22                     
    0xa0c2, // 20: mov    isr, y                     
    0x8020, // 21: push   block                      
    0xa0c3, // 22: mov    isr, null                  
    0x40e2, // 23: in     osr, 2                     
    0x4002, // 24: in     pins, 2                    
    0xa0a6, // 25: mov    pc, isr                    
    0xa02a, // 26: mov    x, !y                      
    0x005c, // 27: jmp    x--, 28                    
    0xa049, // 28: mov    y, !x                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program RotaryEncoder_program = {
    .instructions = RotaryEncoder_program_instructions,
    .length = 29,
    .origin = 0,
};

static inline pio_sm_config RotaryEncoder_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + RotaryEncoder_wrap_target, offset + RotaryEncoder_wrap);
    return c;
}

#include "hardware/gpio.h"
//Helper function to initialize this PIO program
static inline void RotaryEncoder_program_init(PIO pio, uint sm, uint offset, uint ipin, int max_step_rate, float sys_hz)
{
    // Set the pin direction to input as false (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, ipin, 2, false);
    gpio_pull_up(ipin);
    gpio_pull_up(ipin + 1);
    //Set up state machine and wrap target 
    pio_sm_config c = ParallelPort_program_get_default_config(offset);
    // Set the input pins
    sm_config_set_in_pins(&c, ipin);
    // Set the jmp pin
    sm_config_set_jmp_pin(&c, ipin);
    // Set OSR shift direction
    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);
    if(max_step_rate == 0) 
    {
        sm_config_set_clkdiv(&c,1.0);
    }
    else
    {
        float div = sys_hz / (14 * max_step_rate);
        sm_config_set_clkdiv(&c,div); 
    }
    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true); 
}
static inline void RotaryEncoder_request_count(PIO pio, uint sm)
{
    pio->txf[sm] = 1;
}
static inline int32_t RotaryEncoder_fetch_count(PIO pio, uint sm)
{
    while(pio_sm_is_rx_fifo_empty(pio, sm))
        tight_loop_contents();
    return pio->rxf[sm];
}
static inline int32_t RotaryEncoder_get_count(PIO pio, uint sm)
{
    RotaryEncoder_request_count(pio, sm);
    return RotaryEncoder_fetch_count(pio, sm);
}

#endif


.program ParallelPort
.side_set 1 opt

; Read memory from RX fifo and output it to GPIO in parallel with a clock cycle
; Parallel throughput with clock at the fastest frequecy as possible


.wrap_target
    pull            side 1;
    out pins, 8     side 0;
.wrap

% c-sdk {

//Helper function to initialize this PIO program
static inline void ParallelPort_program_init(PIO pio, uint sm, uint offset, uint pin, uint npins, uint clkpin, float freq, float sys_hz)
{
    //Set up state machine and wrap target 
    pio_sm_config c = ParallelPort_program_get_default_config(offset);

    //Allow PIO to control GPIO pin as output
    
    for(int i = pin; i < (pin+npins); i++)
    {
        pio_gpio_init(pio, i);
    }

    pio_gpio_init(pio, clkpin);

    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, npins, true);
    pio_sm_set_consecutive_pindirs(pio, sm, clkpin, 1, true);

    // Set the sideset pins
    sm_config_set_sideset_pins(&c, clkpin);

    // Set the output pins
    sm_config_set_out_pins(&c, pin, npins);

    // Set OSR shift direction
    sm_config_set_out_shift(&c, true, true, 32);

    // Set the clock divider for the state machine
    float div = sys_hz / freq;
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);

    pio_sm_set_enabled(pio, sm, true);
}

static inline void ParallelPort_change_sm_frequency(PIO pio, uint sm, uint offset, uint pin, uint npins, uint clkpin, float freq, float sys_hz)
{
    pio_sm_set_enabled(pio, sm, false);
    ParallelPort_program_init(pio, sm, offset, pin, npins, clkpin, freq, sys_hz);
    pio_sm_set_enabled(pio, sm, true);
}

%}

.program RotaryEncoder

.origin 0

;  00 state
    jmp update              ;read 00
    jmp decrement           ;read 01
    jmp increment           ;read 10
    jmp update              ;read 11

;  01 state
    jmp increment           ;read 00
    jmp update              ;read 01
    jmp update              ;read 10
    jmp decrement           ;read 11

;  10 state
    jmp increment           ;read 00
    jmp update              ;read 01
    jmp update              ;read 10
    jmp decrement           ;read 11

;  11 state
    jmp update              ;read 00
    jmp increment           ;read 01

decrement:
    jmp Y--, update         ;

.wrap_target
update:
    set X, 0                ;
    pull noblock            ;

    mov x, OSR              ;
    mov OSR,ISR             ;

    jmp !X, sample_pins     ;

    mov ISR, Y              ;
    push                    ;

sample_pins:
    mov ISR, null           ;
    in OSR, 2               ;
    in PINS, 2              ;
    mov PC, ISR             ;

increment:
    mov X, !Y               ;
    jmp x--, increment_cont ;

increment_cont:
    mov Y, !x               ;
.wrap

% c-sdk {

#include "hardware/gpio.h"

//Helper function to initialize this PIO program
static inline void RotaryEncoder_program_init(PIO pio, uint sm, uint offset, uint ipin, int max_step_rate, float sys_hz)
{
    // Set the pin direction to input as false (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, ipin, 2, false);

    gpio_pull_up(ipin);
    gpio_pull_up(ipin + 1);

    //Set up state machine and wrap target 
    pio_sm_config c = ParallelPort_program_get_default_config(offset);

    // Set the input pins
    sm_config_set_in_pins(&c, ipin);

    // Set the jmp pin
    sm_config_set_jmp_pin(&c, ipin);

    // Set OSR shift direction
    sm_config_set_in_shift(&c, false, false, 32);

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);

    if(max_step_rate == 0) 
    {
        sm_config_set_clkdiv(&c,1.0);
    }
    else
    {
        float div = sys_hz / (14 * max_step_rate);
        sm_config_set_clkdiv(&c,div); 
    }

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);

    pio_sm_set_enabled(pio, sm, true); 
}

static inline void RotaryEncoder_request_count(PIO pio, uint sm)
{
    pio->txf[sm] = 1;
}

static inline int32_t RotaryEncoder_fetch_count(PIO pio, uint sm)
{
    while(pio_sm_is_rx_fifo_empty(pio, sm))
        tight_loop_contents();
    return pio->rxf[sm];
}

static inline int32_t RotaryEncoder_get_count(PIO pio, uint sm)
{
    RotaryEncoder_request_count(pio, sm);
    return RotaryEncoder_fetch_count(pio, sm);
}
%}